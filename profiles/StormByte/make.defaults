# Use defaults
BASE="branding cjk unicode pic icu -bindist python"
COMPRESSION="brotli bzip2 lz4 lzip lzma lzo zlib zlib zstd"
SECURITY="caps filecaps verify-sig"
SYSTEM="system-av1 system-harfbuzz system-icu system-icu system-jpeg system-libevent system-librnp system-libvpx system-png system-python-libs system-webp system-zlib"
USE="${BASE} ${COMPRESSION} ${SECURITY} ${SYSTEM}"

# Language
L10N="es es-ES"

# CCache
CCACHE_DIR="/var/cache/ccache"

# Compiler custom optimizations
COMPILER_OPTIMIZATION_BASE="-O2 -pipe"
COMPILER_OPTIMIZATION_CLANG="-Wno-unused-command-line-argument -O3 -mllvm -polly -mllvm -polly-parallel -mllvm -polly-vectorizer=stripmine -mllvm -polly-run-dce -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-scheduling=dynamic -mllvm -polly-num-threads=32 -mllvm -polly-omp-backend=LLVM -mllvm -polly-invariant-load-hoisting -fopenmp"
COMPILER_OPTIMIZATION_CPU="-march=native"
COMPILER_OPTIMIZATION_DEBUG="-g -ggdb3"
COMPILER_OPTIMIZATION_GCC="-fgraphite -fgraphite-identity -floop-block -floop-interchange -floop-parallelize-all -floop-strip-mine -ftree-loop-distribution -ftree-loop-linear"
COMPILER_OPTIMIZATION_LTO="-flto=thin"
COMPILER_OPTIMIZATION_SECURITY="" # Already included in clang[cet]

# Linker optimizations
LINKER_OPTIMIZATION_BASE="-Wl,-z,pack-relative-relocs -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -Wl,-O2"
LINKER_OPTIMIZATION_CLANG="-fopenmp=libomp"
LINKER_OPTIMIZATION_BFD="-fuse-ld=bfd"
LINKER_OPTIMIZATION_GOLD="-fuse-ld=gold"
LINKER_OPTIMIZATION_LLD="-fuse-ld=lld"

# Portage folders and config
BASEDIR="/var/db/repos"
PKGDIR="${BASEDIR}/packages"
DISTDIR="/distfiles"
PORTAGE_TMPDIR="/tmp"
EMERGE_DEFAULT_OPTS="--ask --autounmask n --jobs=1 --verbose"
GENTOO_MIRRORS=" https://repo.ifca.es/gentoo-distfiles "
PORTAGE_SYNC_STALE=5

# Licenses
ACCEPT_LICENSE="*"

# Environment
GRUB_PLATFORMS="-* efi-64"
VIDEO_CARDS="-*"
INPUT_DEVICES="-* libinput"
RUBY_TARGETS="-* ruby33"
PORTAGE_WORKDIR_MODE = "0770"
LLVM_TARGETS="X86 NVPTX"
LLVM_SLOT="17"

# Features
FEATURES="ccache metadata-transfer parallel-fetch userfetch"

ABI_X86="64"
ACCEPT_KEYWORDS="~amd64"
CFLAGS="${COMPILER_OPTIMIZATION_BASE} ${COMPILER_OPTIMIZATION_CPU} ${COMPILER_OPTIMIZATION_GCC} ${COMPILER_OPTIMIZATION_SECURITY}"
CXXFLAGS="${COMPILER_OPTIMIZATION_BASE} ${COMPILER_OPTIMIZATION_CPU} ${COMPILER_OPTIMIZATION_GCC} ${COMPILER_OPTIMIZATION_SECURITY}"
FCFLAGS="${COMPILER_OPTIMIZATION_BASE} ${COMPILER_OPTIMIZATION_CPU}"
FFLAGS="${COMPILER_OPTIMIZATION_BASE} ${COMPILER_OPTIMIZATION_CPU}"
LDFLAGS="${LINKER_OPTIMIZATION_BASE}"
RUSTFLAGS="-Ctarget-cpu=native -Copt-level=3"
