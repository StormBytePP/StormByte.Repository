#! /bin/bash

source "/lib/StormByte/functions.sh"
source "/etc/conf.d/stormbyte-makekernel.conf"

version="1.0.0"
current_dir=`pwd`
arguments=("${@:1}")

function header() {
	echo "StormByte Make Kernel Version ${version}"
	echo "Author: David C. Manuelda a.k.a StormByte <StormByte@gmail.com>"
	echo ""
}

function checkVars() {
	local errors=0
	if [ -z "${MOUNT_BOOT}" ] || ([ "${MOUNT_BOOT}" != "yes" ] && [ "${MOUNT_BOOT}" != "no" ]); then
		echo "MOUNT_BOOT variable is not set or contains invalid value (accepted values are yes or no)!"
		errors=1
	fi
	if [ -z "${CLEAN_OLD}" ] || ([ "${CLEAN_OLD}" != "yes" ] && [ "${CLEAN_OLD}" != "no" ]); then
		echo "CLEAN_OLD variable is not set or contains invalid value (accepted values are yes or no)!"
		errors=1
	fi
	if [ -z "${USE_GRUB_MKCONFIG}" ] || ([ "${USE_GRUB_MKCONFIG}" != "yes" ] && [ "${USE_GRUB_MKCONFIG}" != "no" ]); then
		echo "USE_GRUB_MKCONFIG variable is not set or contains invalid value (accepted values are yes or no)!"
		errors=1
	fi
	if [ -z "${POSTCLEAN_KERNEL}" ] || ([ "${POSTCLEAN_KERNEL}" != "yes" ] && [ "${POSTCLEAN_KERNEL}" != "no" ]); then
		echo "POSTCLEAN_KERNEL variable is not set or contains invalid value (accepted values are yes or no)!"
		errors=1
	fi
	if [ -z "${REBUILD_MODULES}" ] || ([ "${REBUILD_MODULES}" != "yes" ] && [ "${REBUILD_MODULES}" != "no" ]); then
		echo "REBUILD_MODULES variable is not set or contains invalid value (accepted values are yes or no)!"
		errors=1
	fi
	if [ "${errors}" -eq 1 ]; then
		exit 1
	fi
}

function doMake() {
	if [ "${MOUNT_BOOT}" = "yes" ]; then
		handleCommand "mount /boot" "Mounting boot"
	fi
	if [ "${CLEAN_OLD}" = "yes" ]; then
		handleCommand "rm -f `find . -maxdepth 1 -type f`" "Cleaning old kernel files"
	fi
	handleCommand "genkernel ${GENKERNEL_DEFAULT_OPTIONS} ${arguments} all" "Compiling kernel and initrd"
	if [ "${REBUILD_MODULES}" = "yes" ]; then
		handleCommand "emerge @module-rebuild --ask n" "Rebuilding external modules"
	fi
	if [ "${POSTCLEAN_KERNEL}" = "yes" ]; then
		cd "/usr/src/linux"
		handleCommand "make clean && make modules_prepare" "Postcleaning kernel build"
		cd "${current_dir}"
	fi
}

function doInit() {
	header
	checkVars
	doMake
}

doInit
