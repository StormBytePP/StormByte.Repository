--- a/Makefile.am	2021-06-21 19:14:09.452673188 +0200
+++ b/Makefile.am	2021-06-21 19:15:31.514670457 +0200
@@ -58,7 +58,7 @@
 	@LIBEXIF_LIBS@ \
 	@LIBINTL@ \
 	@LIBICONV@ \
-	-lFLAC $(flacogglibs) $(vorbislibs) $(avahilibs)
+	-lFLAC $(flacogglibs) $(vorbislibs) $(avahilibs) -lopusfile
 
 testupnpdescgen_SOURCES = testupnpdescgen.c upnpdescgen.c
 testupnpdescgen_LDADD = \
--- a/tagutils/tagutils-ogg.c	2021-06-21 19:29:09.590643230 +0200
+++ b/tagutils/tagutils-ogg.c	2021-06-21 19:29:54.365641739 +0200
@@ -429,7 +429,9 @@
 
 	if(!file)
 	{
-		DPRINTF(E_FATAL, L_SCANNER,
+		/* E_FATAL causes an exit(). */
+		/* DPRINTF(E_FATAL, L_SCANNER, */
+		DPRINTF(E_WARN, L_SCANNER,
 			"Error opening input file \"%s\": %s\n", filename,  strerror(errno));
 		_ogg_free_stream_set(processors);
 		return -1;
--- /dev/null	2021-06-21 16:30:28.831108667 +0200
+++ b/tagutils/tagutils-opus.c	2021-06-21 19:31:28.074638621 +0200
@@ -0,0 +1,60 @@
+//=========================================================================
+// FILENAME	: tagutils-opus.c
+// DESCRIPTION	: Opus metadata reader
+//=========================================================================
+
+static int
+_get_opusfileinfo(char *filename, struct song_metadata *psong)
+{
+	OggOpusFile *opusfile;
+	const OpusTags *tags;
+	char **comment;
+	int *commentlen;
+	int j, e;
+
+
+	opusfile = op_open_file (filename, &e);
+	if(!opusfile)
+	{
+		DPRINTF(E_WARN, L_SCANNER,
+			"Error opening input file \"%s\": %s\n", filename, opus_strerror(e));
+		return -1;
+	}
+
+	DPRINTF(E_MAXDEBUG, L_SCANNER, "Processing file \"%s\"...\n", filename);
+
+	psong->song_length = op_pcm_total (opusfile, -1);
+	if (psong->song_length < 0)
+	{
+		DPRINTF(E_WARN, L_SCANNER,
+				"Unable to obtain length of %s\n", filename);
+		psong->song_length = 0;
+	} else
+		/* Sample rate is always 48k, so length in ms is just samples/48 */
+		psong->song_length /= 48;
+
+	/* Note that this gives only the first link's channel count. */
+	psong->channels = op_channel_count (opusfile, -1);
+
+	psong->samplerate = 48000;
+	psong->bitrate = op_bitrate (opusfile, -1);
+
+	tags = op_tags (opusfile, -1);
+
+	if (!tags)
+	{
+		DPRINTF(E_WARN, L_SCANNER, "Unable to obtain tags from %s\n",
+				filename);
+		return -1;
+	}
+
+	comment = tags->user_comments;
+	commentlen = tags->comment_lengths; 
+
+	for (j = 0; j < tags->comments; j++)
+		vc_scan (psong, *(comment++), *(commentlen++));
+
+	op_free (opusfile);
+	return 0;
+}
+
--- /dev/null	2021-06-21 16:30:28.831108667 +0200
+++ b/tagutils/tagutils-opus.h	2021-06-21 19:32:00.336637547 +0200
@@ -0,0 +1,7 @@
+//=========================================================================
+// FILENAME	: tagutils-opus.h
+// DESCRIPTION	: Opus metadata reader
+//=========================================================================
+
+static int _get_opusfileinfo(char *filename, struct song_metadata *psong);
+

--- a/tagutils/tagutils.c	2021-06-21 20:21:35.717538520 +0200
+++ b/tagutils/tagutils.c	2021-06-21 20:27:16.740527170 +0200
@@ -22,6 +22,7 @@
 /* This file is derived from mt-daapd project */
 
 #include "config.h"
+#include <opusfile.h>
 #include <ctype.h>
 #include <errno.h>
 #include <id3tag.h>
@@ -107,6 +108,7 @@
 #ifdef HAVE_VORBISFILE
 #include "tagutils-ogg.h"
 #endif
+#include "tagutils-opus.h"
 #include "tagutils-flc.h"
 #include "tagutils-asf.h"
 #include "tagutils-wav.h"
@@ -135,6 +137,7 @@
 #ifdef HAVE_VORBISFILE
 	{ "ogg", NULL,		_get_oggfileinfo },
 #endif
+	{ "opus", 0, _get_opusfileinfo },
 	{ "asf", NULL,		_get_asffileinfo },
 	{ "wav", _get_wavtags,	_get_wavfileinfo },
 	{ "pcm", NULL,		_get_pcmfileinfo },
@@ -152,6 +155,7 @@
 #ifdef HAVE_VORBISFILE
 #include "tagutils-ogg.c"
 #endif
+#include "tagutils-opus.c"
 #include "tagutils-flc.c"
 #include "tagutils-asf.c"
 #include "tagutils-wav.c"
--- a/utils.c	2021-06-21 20:28:24.579524912 +0200
+++ b/utils.c	2021-06-21 20:30:46.682520183 +0200
@@ -345,8 +345,15 @@
 				return "pcm";
 			else if( strcmp(mime+6, "3gpp") == 0 )
 				return "3gp";
-			else if( strcmp(mime, "application/ogg") == 0 )
-				return "ogg";
+			else if( strncmp(mime+6, "ogg", 3) == 0 )
+			{
+				if( strstr(mime+9, "opus" ) != (char *)NULL )
+					return "opus";
+				else if( strstr (mime+9, "vorbis" ) != (char *)NULL )
+					return "ogg";
+
+				return "oga";
+			}
 			else if( strcmp(mime+6, "x-dsd") == 0 )
 				return "dsd";
 			break;
@@ -377,6 +384,8 @@
 				return "3gp";
 			else if( strncmp(mime+6, "x-tivo-mpeg", 11) == 0 )
 				return "TiVo";
+			else if ( strcmp(mime+6, "ogg") == 0 )
+			    	return "ogv";
 			break;
 		case 'i':
 			if( strcmp(mime+6, "jpeg") == 0 )
@@ -401,6 +410,7 @@
 		ends_with(file, ".m2t") || ends_with(file, ".mkv")   ||
 		ends_with(file, ".vob") || ends_with(file, ".ts")    ||
 		ends_with(file, ".flv") || ends_with(file, ".xvid")  ||
+		ends_with(file, ".ogv") ||
 #ifdef TIVO_SUPPORT
 		ends_with(file, ".TiVo") ||
 #endif
@@ -416,6 +426,8 @@
 		ends_with(file, ".m4a") || ends_with(file, ".aac")  ||
 		ends_with(file, ".mp4") || ends_with(file, ".m4p")  ||
 		ends_with(file, ".wav") || ends_with(file, ".ogg")  ||
+		ends_with(file, ".oga") ||
+		ends_with(file, ".opus") ||
 		ends_with(file, ".pcm") || ends_with(file, ".3gp")  ||
 		ends_with(file, ".dsf") || ends_with(file, ".dff"));
 }
